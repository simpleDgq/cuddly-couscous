package class33;

// 283. 移动零
public class Problem_0283_MoveZeroes {
    /**
     * 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
     * 请注意 ，必须在不复制数组的情况下原地对数组进行操作。
     * 
     * 示例 1:
     * 输入: nums = [0,1,0,3,12]
     * 输出: [1,3,12,0,0]
     * 
     * 示例 2:
     * 输入: nums = [0]
     * 输出: [0]
     */
    
    /**
     * 思路: 双指针
     * 
     * 刚开始a指向-1位置，b指向0位置
     * 
     * b指向的位置不是0，b指向的位置的数和a指向的位置的下一个位置进行交换, a++，b++
     * b指向的位置是0，a不变，b++，跳下一个数
     * 
     * 例子:
     * [1, 2 , 0 , 3]
     * 初始状态: a = -1 b = 0
     * b指向1，不是0，b指向的位置的数和a指向的位置的下一个位置进行交换, a++，b++  --> a = 0 b = 1 --> [1, 2, 0 ,3]
     * b指向2，不是0，b指向的位置的数和a指向的位置的下一个位置进行交换, a++，b++  --> a = 1 b = 2 --> [1, 2, 0, 3]
     * b指向0，是0，a不变，b++  --> a = 1 b = 3
     * b指向3，不是0，b指向的位置的数和a指向的位置的下一个位置进行交换， a++，b++  --> a = 2 b = 4 --> [1, 2, 3, 0]
     * 
     */
    public void moveZeroes(int[] nums) {
        if(nums == null || nums.length == 0) {
            return;
        }
        
        int a = -1;
//      int b = 0; b可以用下标i代替
        int N = nums.length;
        for(int i = 0; i <= N - 1; i++) {
            if(nums[i] != 0) { // b指向的位置不是0，b指向的位置和a指向的位置的下一个数交换
                swap(nums, i, ++a);
            }
            // 是0的情况，a不变，b++, 继续
        }
    }
    
    public void swap(int arr[], int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
}
